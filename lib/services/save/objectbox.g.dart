// GENERATED CODE - DO NOT MODIFY BY HAND
// This code was generated by ObjectBox. To update it run the generator again:
// With a Flutter package, run `flutter pub run build_runner build`.
// With a Dart package, run `dart run build_runner build`.
// See also https://docs.objectbox.io/getting-started#generate-objectbox-code

// ignore_for_file: camel_case_types, depend_on_referenced_packages
// coverage:ignore-file

import 'dart:typed_data';

import 'package:flat_buffers/flat_buffers.dart' as fb;
import 'package:objectbox/internal.dart'; // generated code can access "internal" functionality
import 'package:objectbox/objectbox.dart';
import 'package:objectbox_flutter_libs/objectbox_flutter_libs.dart';

import '../models.dart';

export 'package:objectbox/objectbox.dart'; // so that callers only have to import this file

final _entities = <ModelEntity>[
  ModelEntity(
      id: const IdUid(1, 8550825164666097869),
      name: 'PastShopping',
      lastPropertyId: const IdUid(5, 1831882746465090257),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 697467335778101036),
            name: 'uuid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 7008468896072430868),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7311376767316223602),
            name: 'listUuid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 3186792918369716541),
            name: 'time',
            type: 10,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1831882746465090257),
            name: 'cost',
            type: 8,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(2, 1683697673671658703),
      name: 'ShoppingList',
      lastPropertyId: const IdUid(3, 7625346957824610894),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 2797859906855081671),
            name: 'uuid',
            type: 6,
            flags: 1),
        ModelProperty(
            id: const IdUid(2, 3344218036960704037),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 7625346957824610894),
            name: 'description',
            type: 9,
            flags: 0)
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[]),
  ModelEntity(
      id: const IdUid(3, 5737883765824196798),
      name: 'Thing',
      lastPropertyId: const IdUid(5, 1157010360080552627),
      flags: 0,
      properties: <ModelProperty>[
        ModelProperty(
            id: const IdUid(1, 7642939435893281204),
            name: 'uuid',
            type: 6,
            flags: 129),
        ModelProperty(
            id: const IdUid(2, 7506754687412918577),
            name: 'name',
            type: 9,
            flags: 0),
        ModelProperty(
            id: const IdUid(3, 892157129392384694),
            name: 'listUuid',
            type: 6,
            flags: 0),
        ModelProperty(
            id: const IdUid(4, 5530245114678669107),
            name: 'bought',
            type: 1,
            flags: 0),
        ModelProperty(
            id: const IdUid(5, 1157010360080552627),
            name: 'listId',
            type: 11,
            flags: 520,
            indexId: const IdUid(1, 4027279383381141360),
            relationTarget: 'ShoppingList')
      ],
      relations: <ModelRelation>[],
      backlinks: <ModelBacklink>[])
];

/// Open an ObjectBox store with the model declared in this file.
Future<Store> openStore(
        {String? directory,
        int? maxDBSizeInKB,
        int? fileMode,
        int? maxReaders,
        bool queriesCaseSensitiveDefault = true,
        String? macosApplicationGroup}) async =>
    Store(getObjectBoxModel(),
        directory: directory ?? (await defaultStoreDirectory()).path,
        maxDBSizeInKB: maxDBSizeInKB,
        fileMode: fileMode,
        maxReaders: maxReaders,
        queriesCaseSensitiveDefault: queriesCaseSensitiveDefault,
        macosApplicationGroup: macosApplicationGroup);

/// ObjectBox model definition, pass it to [Store] - Store(getObjectBoxModel())
ModelDefinition getObjectBoxModel() {
  final model = ModelInfo(
      entities: _entities,
      lastEntityId: const IdUid(3, 5737883765824196798),
      lastIndexId: const IdUid(1, 4027279383381141360),
      lastRelationId: const IdUid(0, 0),
      lastSequenceId: const IdUid(0, 0),
      retiredEntityUids: const [],
      retiredIndexUids: const [],
      retiredPropertyUids: const [],
      retiredRelationUids: const [],
      modelVersion: 5,
      modelVersionParserMinimum: 5,
      version: 1);

  final bindings = <Type, EntityDefinition>{
    PastShopping: EntityDefinition<PastShopping>(
        model: _entities[0],
        toOneRelations: (PastShopping object) => [],
        toManyRelations: (PastShopping object) => {},
        getId: (PastShopping object) => object.uuid,
        setId: (PastShopping object, int id) {
          object.uuid = id;
        },
        objectToFB: (PastShopping object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.uuid);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.listUuid);
          fbb.addInt64(3, object.time.millisecondsSinceEpoch);
          fbb.addFloat64(4, object.cost);
          fbb.finish(fbb.endTable());
          return object.uuid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = PastShopping(
              listUuid:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              uuid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0),
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              time: DateTime.fromMillisecondsSinceEpoch(
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 10, 0)),
              cost: const fb.Float64Reader()
                  .vTableGet(buffer, rootOffset, 12, 0));

          return object;
        }),
    ShoppingList: EntityDefinition<ShoppingList>(
        model: _entities[1],
        toOneRelations: (ShoppingList object) => [],
        toManyRelations: (ShoppingList object) => {},
        getId: (ShoppingList object) => object.uuid,
        setId: (ShoppingList object, int id) {
          object.uuid = id;
        },
        objectToFB: (ShoppingList object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          final descriptionOffset = fbb.writeString(object.description);
          fbb.startTable(4);
          fbb.addInt64(0, object.uuid);
          fbb.addOffset(1, nameOffset);
          fbb.addOffset(2, descriptionOffset);
          fbb.finish(fbb.endTable());
          return object.uuid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = ShoppingList(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              description: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 8, ''),
              uuid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));

          return object;
        }),
    Thing: EntityDefinition<Thing>(
        model: _entities[2],
        toOneRelations: (Thing object) => [object.list],
        toManyRelations: (Thing object) => {},
        getId: (Thing object) => object.uuid,
        setId: (Thing object, int id) {
          object.uuid = id;
        },
        objectToFB: (Thing object, fb.Builder fbb) {
          final nameOffset = fbb.writeString(object.name);
          fbb.startTable(6);
          fbb.addInt64(0, object.uuid);
          fbb.addOffset(1, nameOffset);
          fbb.addInt64(2, object.listUuid);
          fbb.addBool(3, object.bought);
          fbb.addInt64(4, object.list.targetId);
          fbb.finish(fbb.endTable());
          return object.uuid;
        },
        objectFromFB: (Store store, ByteData fbData) {
          final buffer = fb.BufferContext(fbData);
          final rootOffset = buffer.derefObject(0);

          final object = Thing(
              name: const fb.StringReader(asciiOptimization: true)
                  .vTableGet(buffer, rootOffset, 6, ''),
              bought: const fb.BoolReader()
                  .vTableGet(buffer, rootOffset, 10, false),
              listUuid:
                  const fb.Int64Reader().vTableGet(buffer, rootOffset, 8, 0),
              uuid: const fb.Int64Reader().vTableGet(buffer, rootOffset, 4, 0));
          object.list.targetId =
              const fb.Int64Reader().vTableGet(buffer, rootOffset, 12, 0);
          object.list.attach(store);
          return object;
        })
  };

  return ModelDefinition(model, bindings);
}

/// [PastShopping] entity fields to define ObjectBox queries.
class PastShopping_ {
  /// see [PastShopping.uuid]
  static final uuid =
      QueryIntegerProperty<PastShopping>(_entities[0].properties[0]);

  /// see [PastShopping.name]
  static final name =
      QueryStringProperty<PastShopping>(_entities[0].properties[1]);

  /// see [PastShopping.listUuid]
  static final listUuid =
      QueryIntegerProperty<PastShopping>(_entities[0].properties[2]);

  /// see [PastShopping.time]
  static final time =
      QueryIntegerProperty<PastShopping>(_entities[0].properties[3]);

  /// see [PastShopping.cost]
  static final cost =
      QueryDoubleProperty<PastShopping>(_entities[0].properties[4]);
}

/// [ShoppingList] entity fields to define ObjectBox queries.
class ShoppingList_ {
  /// see [ShoppingList.uuid]
  static final uuid =
      QueryIntegerProperty<ShoppingList>(_entities[1].properties[0]);

  /// see [ShoppingList.name]
  static final name =
      QueryStringProperty<ShoppingList>(_entities[1].properties[1]);

  /// see [ShoppingList.description]
  static final description =
      QueryStringProperty<ShoppingList>(_entities[1].properties[2]);
}

/// [Thing] entity fields to define ObjectBox queries.
class Thing_ {
  /// see [Thing.uuid]
  static final uuid = QueryIntegerProperty<Thing>(_entities[2].properties[0]);

  /// see [Thing.name]
  static final name = QueryStringProperty<Thing>(_entities[2].properties[1]);

  /// see [Thing.listUuid]
  static final listUuid =
      QueryIntegerProperty<Thing>(_entities[2].properties[2]);

  /// see [Thing.bought]
  static final bought = QueryBooleanProperty<Thing>(_entities[2].properties[3]);

  /// see [Thing.list]
  static final list =
      QueryRelationToOne<Thing, ShoppingList>(_entities[2].properties[4]);
}
